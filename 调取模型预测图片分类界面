import sys
from PyQt5 import QtWidgets,  QtGui
from PyQt5.QtWidgets import *
import numpy as np
import paddle.fluid as fluid
from PIL import Image



class predictpicture(QWidget):
    def __init__(self):
        super(predictpicture, self).__init__()

        self.resize(1000, 800)
        self.setWindowTitle("图片分类")

        self.label = QLabel(self)
        self.label.setText("   显示图片")
        self.label.setFixedSize(500, 500)
        self.label.move(50, 100)

        self.label.setStyleSheet("QLabel{background:white;}"
                                 "QLabel{color:rgb(300,300,300,120);font-size:10px;font-weight:bold;font-family:宋体;}"
                                 )

        self.textEdit = QTextEdit(self)
        self.textEdit.setFixedSize(250,30)
        self.textEdit.setStyleSheet("background:white")
        self.textEdit.move(600,100)


        btn = QPushButton(self)
        btn.setText("打开图片")
        btn.move(50, 50)
        btn.clicked.connect(self.predict)


    def predict(self):
        imgName, imgType = QFileDialog.getOpenFileName(self, "打开图片", "", "*.jpg;;*.png;;All Files(*)")
        jpg = QtGui.QPixmap(imgName).scaled(self.label.width(), self.label.height())
        self.label.setPixmap(jpg)
        print(imgName)

        model_save_dir = "D:\代码库\MAstudy\outputs\cat.inference.model"
        use_cuda = False
        place = fluid.CUDAPlace(0) if use_cuda else fluid.CPUPlace()
        infer_exe = fluid.Executor(place)

        #打开图片
        im = Image.open(imgName)
        #将图片调整为跟训练数据一样的大小  32*32，                   设定ANTIALIAS，即抗锯齿.resize是缩放
        im = im.resize((32, 32), Image.ANTIALIAS)
        #建立图片矩阵 类型为float32
        im = np.array(im).astype(np.float32)
        #矩阵转置
        im = im.transpose((2, 0, 1))
        #将像素值从【0-255】转换为【0-1】
        im = im / 255.0
        #print(im)
        im = np.expand_dims(im, axis=0)
        # 保持和之前输入image维度一致

        #global infer_exe,inference_program,feed_target_names,fetch_targets
        inference_scope = fluid.core.Scope()
        with fluid.scope_guard(inference_scope):
           [inference_program,                                            #推理Program
             feed_target_names,                                            #是一个str列表，它包含需要在推理 Program 中提供数据的变量的名称。
             fetch_targets] = fluid.io.load_inference_model(model_save_dir,#fetch_targets：是一个 Variable 列表，从中我们可以得到推断结果。model_save_dir：模型保存的路径
                                                            infer_exe)     #infer_exe: 运行 inference model的 executor
           results = infer_exe.run(inference_program,               #运行推测程序
                        feed={feed_target_names[0]: im},           #喂入要预测的im
                        fetch_list=fetch_targets)
           #得到推测结果,
           label_list = [
               "airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse",
               "ship", "truck"
           ]
           output = "该图片的预测结果为: " +str(label_list[np.argmax(results[0])])

        self.textEdit.setText(output)





if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    my = predictpicture()
    my.show()
    sys.exit(app.exec_())
